[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "woodpeckR: coding, one acorn at a time",
    "section": "",
    "text": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown\n\n\n\nR\n\n\n\nRecently, I adapted slides from one of my talks into a blog post format, with each slide’s narration transcribed below it. In my experience, people don’t usually post slides…\n\n\n\nKaija Gahm\n\n\nOct 14, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "",
    "text": "In July 2021, I gave a talk at the inaugural SORTEE conference, describing my experience auditing colleague’s workflow to improve reproducibility.\nRecently, I posted my slides here after converting them to a blog post/text format. My goal was to present each slide, followed by a block of text, essentially transcribing what I said during the presentation.\n\n\n\nThe goal: To transform a slide deck to a scrollable blog post where each slide is followed by its caption or transcription\n\n\nWhy did I want to do this in the first place? In my experience looking for help and ideas on the internet, it’s often easier to skim a text-based blog post than to watch an entire video.\nIt’s become very common to post slides after giving a talk, and I think that’s fantastic. Here are some examples:\nElla Kaye | Maëlle Salmon | Alison Hill\nThe problem is, my slides are often pretty minimal. I try to communicate my points mainly through images and diagrams. If you weren’t there for the talk, I don’t think you’d get a lot out of looking at my slides by themselves. So when it came time to post my talk and its slides, I wanted some way to convert it into a blog post, without totally reinventing the wheel.\n\n\n\nMy slides are pretty heavy on diagrams and don’t have a lot of text. Without the context of my narration, you probably wouldn’t really know what’s going on.\n\n\nHere, I’ll outline the process that I used to achieve that format. I hope you find this helpful. If you’ve done a similar thing, feel free to comment with any tips and tricks or lessons learned!"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#motivation",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#motivation",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "",
    "text": "In July 2021, I gave a talk at the inaugural SORTEE conference, describing my experience auditing colleague’s workflow to improve reproducibility.\nRecently, I posted my slides here after converting them to a blog post/text format. My goal was to present each slide, followed by a block of text, essentially transcribing what I said during the presentation.\n\n\n\nThe goal: To transform a slide deck to a scrollable blog post where each slide is followed by its caption or transcription\n\n\nWhy did I want to do this in the first place? In my experience looking for help and ideas on the internet, it’s often easier to skim a text-based blog post than to watch an entire video.\nIt’s become very common to post slides after giving a talk, and I think that’s fantastic. Here are some examples:\nElla Kaye | Maëlle Salmon | Alison Hill\nThe problem is, my slides are often pretty minimal. I try to communicate my points mainly through images and diagrams. If you weren’t there for the talk, I don’t think you’d get a lot out of looking at my slides by themselves. So when it came time to post my talk and its slides, I wanted some way to convert it into a blog post, without totally reinventing the wheel.\n\n\n\nMy slides are pretty heavy on diagrams and don’t have a lot of text. Without the context of my narration, you probably wouldn’t really know what’s going on.\n\n\nHere, I’ll outline the process that I used to achieve that format. I hope you find this helpful. If you’ve done a similar thing, feel free to comment with any tips and tricks or lessons learned!"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#what-youll-need",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#what-youll-need",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "What you’ll need",
    "text": "What you’ll need\nThis post refers to the process for converting slides to a scrollable RMarkdown document, like this post.\nYou will need two basic components:\n\n1. A slide deck\nWhile I dream of one day becoming proficient in xaringan, for now I make my presentations in Google Slides, which integrates pretty well into my institution’s Google-based storage system.\nSo, after creating my talk, I had a nice slide deck saved as a Google Slides presentation. Yours might be a Powerpoint, a pdf, or some other type of presentation. I won’t speak to the particularities of each type of slide deck, but the important thing is that you need to be able to convert your slides to a pdf document, one slide per page. If you can do that, this process will work.\n\n\n\nMy slides!\n\n\n\n\n2. Slide-by-slide transcriptions or captions\nTo display your slides as a scrollable page, with each slide followed by some text, you’ll of course need the text for each slide.\nFor this process, I’m assuming that you already know the text you’d like to associate with each slide, up front.\nWhy? Well, of course you could insert slides one by one into RMarkdown and then type out the text in the document after each one. But that’s laborious and slow, and it kind of defeats the point of automating the process.\nInstead, I’m assuming that you already have the text written. Examples:\n\nYou already had to write down and provide talk transcripts for the venue where you presented your talk, and you have them saved somewhere.\nYou want to take some time to click through each slide and write about it.\nYou’ve written presenter notes in Google Slides/Powerpoint/Keynote/whatever and want to present the notes along with the slides."
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#step-by-step",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#step-by-step",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "Step by step",
    "text": "Step by step\nOkay, armed with your slides and transcripts or text, let’s do this.\n\n1. Create an RMarkdown document\nIf you’re publishing your post in Distill, you might want to use distill::create_post().\nOtherwise, just create a regular old RMarkdown document.\nMake sure to take note of where your RMarkdown document lives. You’re going to need to store the materials (slides and captions) in a folder somewhere logical–either in your post folder for Distill, or maybe in a subfolder of your RStudio Project. (Consider pairing this with the here package–it helps get around the weirdness with working directories in RMarkdown.)\n\n\n2. Convert slides to images\nI got stuck when it came to extracting each slide from Google Slides as an image. Unfortunately, there’s no good way to download Google Slides as individual images. The thought of taking individual screenshots of slides made me want to abandon the whole project.\nInstead, I started by saving the slides to a PDF document. In Google Slides, you can choose File &gt; Download &gt; PDF Document (.pdf)\n\n\n\nSaving a Google Slides presentation as a PDF\n\n\nNext, I needed to convert the PDF to a series of images so I could insert them one by one into the RMarkdown document.\nI did this using smallpdf to convert the multi-page PDF to a series of JPG images. (Smallpdf has free features if you create an account or log in using e.g. Google, or there’s a free trial for some of their paid features. Converting a pdf to jpg images seems to be a free feature–I had no problem doing it using my Google account.)\nThe images will be saved by default with file names like 0001.jpg, in order. Put all of the images into a folder and save it as a subdirectory of your post/project folder, or wherever makes sense in your Project directory. Make sure they’re in their own folder (no other files), and all in the same place.\n\nAn alternative method for conversion\nIf you don’t want to upload your materials to smallpdf, you can also convert your PDF to images using ‘imagemagick’, a free downloadable command line tool. Download ‘imagemagick’ here. Then you can use this code:\nconvert myfilename.pdf myoutputfilename-%04d.jpg\nThe %04d will create files with four-digit numbers at the end, starting with myoutputfilename-0000.jpg and then counting up: myoutputfilename-0001.jpg, myoutputfilename-0002.jpg, etc.\nThanks to Darya Vanichkina for contributing this method!\n\n\n\n3. Compile your transcription data\nNow, let’s get your captions or transcripts in a format that will be easy to use. Eventually, we’ll want a CSV or text file with each slide’s caption in its own row.\nYou can create this file however you want. I made a new document in Google Sheets and copied and pasted my slide transcripts into successive rows from the document in which I had written them.\nI also added an index column for good measure, to keep track of the slide numbers. I wanted to be able to cross-reference the slide image file names with the captions later on, to make sure I’d assigned the right caption to each slide.\nI exported the finished sheet as a csv, so it looked something like this:\n\n\n\n\n\nA quick note about line breaks and text formatting:\nBecause we’re passing in the caption data from an external spreadsheet, there are limitations to how much text formatting we can apply to them. It would be easier to be able to edit each caption in RMarkdown, with all the formatting possibilities that affords, but doing that makes automation impossible. So I kept my formatting pretty simple.\nIf you do want to add formatting, you can use html formatting tags to make your text bold, italic, etc. or to insert line breaks.\nFor some reason, \\n doesn’t work to create a line break in the slide captions. But the html tag &lt;br&gt; does, so I used &lt;br&gt; pretty liberally to break up long, multi-paragraph slide captions.\n\n\n4. Format input data for the for loop\nWe’re going to be programmatically inserting each slide, with its caption, into the RMarkdown document. I used a for loop to do this.\nYou’re going to need two inputs for the for loop: a vector of slide image file paths and a vector of slide captions. I chose to combine the two into a single data frame, although you don’t strictly have to do this.\n\n# Read in the csv of slide captions\ndescriptionData &lt;- read.csv(\"retroactivelyReproducible_slideCaptions.csv\")\n\n# Create a vector of slide image names by listing the image file paths\nfileNames &lt;- list.files(path =\"slideImages\", \n                        full.names = T) # full file paths\n\n# Create a data frame combining the file paths and captions\ninput &lt;- data.frame(slideDescription = descriptionData$description,\n                    slideImage = fileNames)\n\n\n\n5. Make the for loop\nNext, I used a for loop to combine the data into a dynamically-generated portion of the RMarkdown document. The code I used is adapted from this StackOverflow post.\n\n# Set up a for loop for as many iterations as there are slides\nfor(i in 1:nrow(input)){\n  # For convenience, make a temp object for the current slide\n  currentSlide &lt;- input[i, ] \n  \n  # Create raw markdown code to insert each image, pasting in the file name\n  cat(paste0(\"![](\", currentSlide$slideImage, \")\"))\n  \n  # Add the slide description immediately under the image\n  cat(currentSlide$slideDescription)\n  \n  # Add space after the description to differentiate it from the next slide\n  cat(\"&lt;br&gt;&lt;br&gt;&lt;br&gt;\")\n}\n\nNote: For the code chunk containing this for loop, make sure to set the chunk option results = 'asis'. It’s important to do this because we’re dynamically generating a raw markdown string to insert the images, so we need the results to be evaluated as if they had been typed into RMarkdown by hand. If you don’t set results = 'asis', then the results will show up as RMarkdown chunk output and none of the formatting will come through.\nAlso, set echo = FALSE so that the code itself doesn’t show up.\nSo, the final code chunk should look something like this:\n\n\n\n\n\n\n\n6. Knit the document\nBe sure to test out this code a few times by knitting the document to make sure it looks good! Adjust the line spacing and other formatting as necessary. I knitted my markdown to html because I was putting it on a Distill site; I’m not sure how well this process would work for a knitted Word or PDF document.\nNote: Sometimes, the formatting for dynamically-generated markdown like this won’t show up correctly in the html preview of your knitted RMarkdown document. Make sure to open the page in a browser window to see how the final product will actually look."
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#adding-a-video-of-your-talk",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#adding-a-video-of-your-talk",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "Adding a video of your talk",
    "text": "Adding a video of your talk\nI was excited that the above process worked for turning a slide deck into a scrollable blog post. But I also wanted to embed the video recording of my talk in the same post so people could access that medium if they preferred.\nA lot has been written about how to embed videos in RMarkdown outputs, but some of the approaches I found didn’t work for me. I don’t quite understand why code that worked for other people failed for me, but here’s what did work:\n\nOptions for video storage\nYou can either store your video locally and embed it similarly to how you’d embed a photo, like this. This works best if the file is pretty small, especially if your RMarkdown (like mine) is backed up to a GitHub repository.\nMy video was over 100MB, so GitHub wasn’t an easy option. I started looking into alternatives.\nThe easiest thing turned out to be to upload the video to YouTube and leave it as “unlisted” (publicly accessible, but not findable in a search–you can only see it if you have access to the direct video link).\nThis approach does require that you have a YouTube account, but you can sign up for free through Google. I think YouTube also has some restrictions for how long/how big your videos can be, and what formats are acceptable. Mine was 10 minutes and didn’t need to be high definition, and it was saved as .mp4, so this worked well for me.\nInstructions on how to upload a video to YouTube here.\nNext, find the video’s embed link (instructions). Copy that link to your clipboard; you’ll use it in the next code chunk.\n\n\nEmbed the video\nI embedded the video as an iframe in html. The code looked like this, and it can just go in the main body of your RMarkdown document (doesn’t have to be in a code chunk):\n&lt;iframe width=\"560\" height=\"450\" src=\"https://www.youtube.com/embed/cJq2kp114Mg\" \ntitle=\"Your Title Here\" frameborder=\"0\" allow=\"accelerometer; \nautoplay; clipboard-write; encrypted-media; gyroscope; \npicture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\nSubstitute your own video link for the one above, of course.\nTweak the dimensions of your video until it looks right. 560 by 450 isn’t anything special, it’s just what ended up looking decent for my video.\nThere you have it! Again, here is the post as it appears in its final form.\nThe full code I used to create the post is on my GitHub.\nThanks for reading!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kaija Gahm",
    "section": "",
    "text": "I am a biologist and data scientist. Currently, I’m studying the social behavior and movement ecology of griffon vultures in the Pinter-Wollman Lab. Previously, I was a data manager at the Cary Institute and a research assistant with the Yale Grammatical Diversity Project. I’ve written about my work with each of these organizations: Cary | YGDP.\nI did my B.S. in EEB at Yale, where I studied physiological tradeoffs in wood frog tadpoles (talk | paper).\nI advocate for open and reproducible data science and help others to apply these ideas to their own work. I run “Hacky Hours” at UCLA, and I’m on the Board of Directors for SORTEE. I teach workshops with The Carpentries, and I’m currently developing a Carpentries workshop of my own!"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Kaija Gahm",
    "section": "",
    "text": "I am a biologist and data scientist. Currently, I’m studying the social behavior and movement ecology of griffon vultures in the Pinter-Wollman Lab. Previously, I was a data manager at the Cary Institute and a research assistant with the Yale Grammatical Diversity Project. I’ve written about my work with each of these organizations: Cary | YGDP.\nI did my B.S. in EEB at Yale, where I studied physiological tradeoffs in wood frog tadpoles (talk | paper).\nI advocate for open and reproducible data science and help others to apply these ideas to their own work. I run “Hacky Hours” at UCLA, and I’m on the Board of Directors for SORTEE. I teach workshops with The Carpentries, and I’m currently developing a Carpentries workshop of my own!"
  },
  {
    "objectID": "index.html#cv",
    "href": "index.html#cv",
    "title": "Kaija Gahm",
    "section": "CV",
    "text": "CV\nDownload a recent copy of my CV."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Kaija Gahm",
    "section": "Education",
    "text": "Education\nUniversity of California, Los Angeles | Los Angeles, CA Ph.D. Student in Ecology & Evolutionary Biology | September 2021 - Present. NSF Graduate Research Fellow 2023; UCLA Graduate Dean’s Research Fellow 2021.\nYale University | New Haven, CT | B.S. in Ecology & Evolutionary Biology | September 2016 - May 2020"
  },
  {
    "objectID": "index.html#work",
    "href": "index.html#work",
    "title": "Kaija Gahm",
    "section": "Work",
    "text": "Work\nCary Institute of Ecosystem Studies | Database Specialist | June 2020 - August 2021\nYale Grammatical Diversity Project | Research Assistant | September 2018 - March 2021\nYale Peabody Museum of Natural History | Student Museum Assistant (Entomology) | September 2016 - May 2020"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Kaija Gahm",
    "section": "Contact",
    "text": "Contact\nI’d love to hear from you! You can find me online using the links to the left, or email me at kgahm [at] ucla.edu."
  }
]