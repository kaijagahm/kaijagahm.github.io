[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "woodpeckR: coding, one acorn at a time",
    "section": "",
    "text": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown\n\n\n\nR\n\n\n\nRecently, I adapted slides from one of my talks into a blog post format, with each slide’s narration transcribed below it. In my experience, people don’t usually post slides…\n\n\n\nKaija Gahm\n\n\nOct 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreenT part 2: Behind the app\n\n\n\nR\n\n\n\nA more detailed explanation of some of the code that makes the greenT app work.\n\n\n\n\n\n\nMay 13, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "",
    "text": "In July 2021, I gave a talk at the inaugural SORTEE conference, describing my experience auditing colleague’s workflow to improve reproducibility.\nRecently, I posted my slides here after converting them to a blog post/text format. My goal was to present each slide, followed by a block of text, essentially transcribing what I said during the presentation.\n\n\n\nThe goal: To transform a slide deck to a scrollable blog post where each slide is followed by its caption or transcription\n\n\nWhy did I want to do this in the first place? In my experience looking for help and ideas on the internet, it’s often easier to skim a text-based blog post than to watch an entire video.\nIt’s become very common to post slides after giving a talk, and I think that’s fantastic. Here are some examples:\nElla Kaye | Maëlle Salmon | Alison Hill\nThe problem is, my slides are often pretty minimal. I try to communicate my points mainly through images and diagrams. If you weren’t there for the talk, I don’t think you’d get a lot out of looking at my slides by themselves. So when it came time to post my talk and its slides, I wanted some way to convert it into a blog post, without totally reinventing the wheel.\n\n\n\nMy slides are pretty heavy on diagrams and don’t have a lot of text. Without the context of my narration, you probably wouldn’t really know what’s going on.\n\n\nHere, I’ll outline the process that I used to achieve that format. I hope you find this helpful. If you’ve done a similar thing, feel free to comment with any tips and tricks or lessons learned!"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#motivation",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#motivation",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "",
    "text": "In July 2021, I gave a talk at the inaugural SORTEE conference, describing my experience auditing colleague’s workflow to improve reproducibility.\nRecently, I posted my slides here after converting them to a blog post/text format. My goal was to present each slide, followed by a block of text, essentially transcribing what I said during the presentation.\n\n\n\nThe goal: To transform a slide deck to a scrollable blog post where each slide is followed by its caption or transcription\n\n\nWhy did I want to do this in the first place? In my experience looking for help and ideas on the internet, it’s often easier to skim a text-based blog post than to watch an entire video.\nIt’s become very common to post slides after giving a talk, and I think that’s fantastic. Here are some examples:\nElla Kaye | Maëlle Salmon | Alison Hill\nThe problem is, my slides are often pretty minimal. I try to communicate my points mainly through images and diagrams. If you weren’t there for the talk, I don’t think you’d get a lot out of looking at my slides by themselves. So when it came time to post my talk and its slides, I wanted some way to convert it into a blog post, without totally reinventing the wheel.\n\n\n\nMy slides are pretty heavy on diagrams and don’t have a lot of text. Without the context of my narration, you probably wouldn’t really know what’s going on.\n\n\nHere, I’ll outline the process that I used to achieve that format. I hope you find this helpful. If you’ve done a similar thing, feel free to comment with any tips and tricks or lessons learned!"
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#what-youll-need",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#what-youll-need",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "What you’ll need",
    "text": "What you’ll need\nThis post refers to the process for converting slides to a scrollable RMarkdown document, like this post.\nYou will need two basic components:\n\n1. A slide deck\nWhile I dream of one day becoming proficient in xaringan, for now I make my presentations in Google Slides, which integrates pretty well into my institution’s Google-based storage system.\nSo, after creating my talk, I had a nice slide deck saved as a Google Slides presentation. Yours might be a Powerpoint, a pdf, or some other type of presentation. I won’t speak to the particularities of each type of slide deck, but the important thing is that you need to be able to convert your slides to a pdf document, one slide per page. If you can do that, this process will work.\n\n\n\nMy slides!\n\n\n\n\n2. Slide-by-slide transcriptions or captions\nTo display your slides as a scrollable page, with each slide followed by some text, you’ll of course need the text for each slide.\nFor this process, I’m assuming that you already know the text you’d like to associate with each slide, up front.\nWhy? Well, of course you could insert slides one by one into RMarkdown and then type out the text in the document after each one. But that’s laborious and slow, and it kind of defeats the point of automating the process.\nInstead, I’m assuming that you already have the text written. Examples:\n\nYou already had to write down and provide talk transcripts for the venue where you presented your talk, and you have them saved somewhere.\nYou want to take some time to click through each slide and write about it.\nYou’ve written presenter notes in Google Slides/Powerpoint/Keynote/whatever and want to present the notes along with the slides."
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#step-by-step",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#step-by-step",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "Step by step",
    "text": "Step by step\nOkay, armed with your slides and transcripts or text, let’s do this.\n\n1. Create an RMarkdown document\nIf you’re publishing your post in Distill, you might want to use distill::create_post().\nOtherwise, just create a regular old RMarkdown document.\nMake sure to take note of where your RMarkdown document lives. You’re going to need to store the materials (slides and captions) in a folder somewhere logical–either in your post folder for Distill, or maybe in a subfolder of your RStudio Project. (Consider pairing this with the here package–it helps get around the weirdness with working directories in RMarkdown.)\n\n\n2. Convert slides to images\nI got stuck when it came to extracting each slide from Google Slides as an image. Unfortunately, there’s no good way to download Google Slides as individual images. The thought of taking individual screenshots of slides made me want to abandon the whole project.\nInstead, I started by saving the slides to a PDF document. In Google Slides, you can choose File &gt; Download &gt; PDF Document (.pdf)\n\n\n\nSaving a Google Slides presentation as a PDF\n\n\nNext, I needed to convert the PDF to a series of images so I could insert them one by one into the RMarkdown document.\nI did this using smallpdf to convert the multi-page PDF to a series of JPG images. (Smallpdf has free features if you create an account or log in using e.g. Google, or there’s a free trial for some of their paid features. Converting a pdf to jpg images seems to be a free feature–I had no problem doing it using my Google account.)\nThe images will be saved by default with file names like 0001.jpg, in order. Put all of the images into a folder and save it as a subdirectory of your post/project folder, or wherever makes sense in your Project directory. Make sure they’re in their own folder (no other files), and all in the same place.\n\nAn alternative method for conversion\nIf you don’t want to upload your materials to smallpdf, you can also convert your PDF to images using ‘imagemagick’, a free downloadable command line tool. Download ‘imagemagick’ here. Then you can use this code:\nconvert myfilename.pdf myoutputfilename-%04d.jpg\nThe %04d will create files with four-digit numbers at the end, starting with myoutputfilename-0000.jpg and then counting up: myoutputfilename-0001.jpg, myoutputfilename-0002.jpg, etc.\nThanks to Darya Vanichkina for contributing this method!\n\n\n\n3. Compile your transcription data\nNow, let’s get your captions or transcripts in a format that will be easy to use. Eventually, we’ll want a CSV or text file with each slide’s caption in its own row.\nYou can create this file however you want. I made a new document in Google Sheets and copied and pasted my slide transcripts into successive rows from the document in which I had written them.\nI also added an index column for good measure, to keep track of the slide numbers. I wanted to be able to cross-reference the slide image file names with the captions later on, to make sure I’d assigned the right caption to each slide.\nI exported the finished sheet as a csv, so it looked something like this:\n\n\n\n\n\nA quick note about line breaks and text formatting:\nBecause we’re passing in the caption data from an external spreadsheet, there are limitations to how much text formatting we can apply to them. It would be easier to be able to edit each caption in RMarkdown, with all the formatting possibilities that affords, but doing that makes automation impossible. So I kept my formatting pretty simple.\nIf you do want to add formatting, you can use html formatting tags to make your text bold, italic, etc. or to insert line breaks.\nFor some reason, \\n doesn’t work to create a line break in the slide captions. But the html tag &lt;br&gt; does, so I used &lt;br&gt; pretty liberally to break up long, multi-paragraph slide captions.\n\n\n4. Format input data for the for loop\nWe’re going to be programmatically inserting each slide, with its caption, into the RMarkdown document. I used a for loop to do this.\nYou’re going to need two inputs for the for loop: a vector of slide image file paths and a vector of slide captions. I chose to combine the two into a single data frame, although you don’t strictly have to do this.\n\n# Read in the csv of slide captions\ndescriptionData &lt;- read.csv(\"retroactivelyReproducible_slideCaptions.csv\")\n\n# Create a vector of slide image names by listing the image file paths\nfileNames &lt;- list.files(path =\"slideImages\", \n                        full.names = T) # full file paths\n\n# Create a data frame combining the file paths and captions\ninput &lt;- data.frame(slideDescription = descriptionData$description,\n                    slideImage = fileNames)\n\n\n\n5. Make the for loop\nNext, I used a for loop to combine the data into a dynamically-generated portion of the RMarkdown document. The code I used is adapted from this StackOverflow post.\n\n# Set up a for loop for as many iterations as there are slides\nfor(i in 1:nrow(input)){\n  # For convenience, make a temp object for the current slide\n  currentSlide &lt;- input[i, ] \n  \n  # Create raw markdown code to insert each image, pasting in the file name\n  cat(paste0(\"![](\", currentSlide$slideImage, \")\"))\n  \n  # Add the slide description immediately under the image\n  cat(currentSlide$slideDescription)\n  \n  # Add space after the description to differentiate it from the next slide\n  cat(\"&lt;br&gt;&lt;br&gt;&lt;br&gt;\")\n}\n\nNote: For the code chunk containing this for loop, make sure to set the chunk option results = 'asis'. It’s important to do this because we’re dynamically generating a raw markdown string to insert the images, so we need the results to be evaluated as if they had been typed into RMarkdown by hand. If you don’t set results = 'asis', then the results will show up as RMarkdown chunk output and none of the formatting will come through.\nAlso, set echo = FALSE so that the code itself doesn’t show up.\nSo, the final code chunk should look something like this:\n\n\n\n\n\n\n\n6. Knit the document\nBe sure to test out this code a few times by knitting the document to make sure it looks good! Adjust the line spacing and other formatting as necessary. I knitted my markdown to html because I was putting it on a Distill site; I’m not sure how well this process would work for a knitted Word or PDF document.\nNote: Sometimes, the formatting for dynamically-generated markdown like this won’t show up correctly in the html preview of your knitted RMarkdown document. Make sure to open the page in a browser window to see how the final product will actually look."
  },
  {
    "objectID": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#adding-a-video-of-your-talk",
    "href": "posts/2021-10-14-publishing-scrollable-slides-in-rmarkdown/index.html#adding-a-video-of-your-talk",
    "title": "A Semi-Automated Process for Converting Slides to a Blog Post in RMarkdown",
    "section": "Adding a video of your talk",
    "text": "Adding a video of your talk\nI was excited that the above process worked for turning a slide deck into a scrollable blog post. But I also wanted to embed the video recording of my talk in the same post so people could access that medium if they preferred.\nA lot has been written about how to embed videos in RMarkdown outputs, but some of the approaches I found didn’t work for me. I don’t quite understand why code that worked for other people failed for me, but here’s what did work:\n\nOptions for video storage\nYou can either store your video locally and embed it similarly to how you’d embed a photo, like this. This works best if the file is pretty small, especially if your RMarkdown (like mine) is backed up to a GitHub repository.\nMy video was over 100MB, so GitHub wasn’t an easy option. I started looking into alternatives.\nThe easiest thing turned out to be to upload the video to YouTube and leave it as “unlisted” (publicly accessible, but not findable in a search–you can only see it if you have access to the direct video link).\nThis approach does require that you have a YouTube account, but you can sign up for free through Google. I think YouTube also has some restrictions for how long/how big your videos can be, and what formats are acceptable. Mine was 10 minutes and didn’t need to be high definition, and it was saved as .mp4, so this worked well for me.\nInstructions on how to upload a video to YouTube here.\nNext, find the video’s embed link (instructions). Copy that link to your clipboard; you’ll use it in the next code chunk.\n\n\nEmbed the video\nI embedded the video as an iframe in html. The code looked like this, and it can just go in the main body of your RMarkdown document (doesn’t have to be in a code chunk):\n&lt;iframe width=\"560\" height=\"450\" src=\"https://www.youtube.com/embed/cJq2kp114Mg\" \ntitle=\"Your Title Here\" frameborder=\"0\" allow=\"accelerometer; \nautoplay; clipboard-write; encrypted-media; gyroscope; \npicture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\nSubstitute your own video link for the one above, of course.\nTweak the dimensions of your video until it looks right. 560 by 450 isn’t anything special, it’s just what ended up looking decent for my video.\nThere you have it! Again, here is the post as it appears in its final form.\nThe full code I used to create the post is on my GitHub.\nThanks for reading!"
  },
  {
    "objectID": "posts/2021-05-12-greent-how-to/index.html",
    "href": "posts/2021-05-12-greent-how-to/index.html",
    "title": "greenT part 2: Behind the app",
    "section": "",
    "text": "The digits 0-9, according to my brain\nThe other day, I posted an app about grapheme-color synesthesia, called greenT. This is part 2 of a blog post about the app. Part 1 gave an introduction to the who/what/why of the app, and provided a little guided tour through each page and feature. You can read part 1 here.\nThis post will go into more detail about some of the code in the app. If you’re interested in Shiny and want to know how I made everything work, this is the post for you. I picked a few features that were the most interesting to me, and/or the ones that I had to do the most independent troubleshooting to figure out. If you have questions about the rest of the app, get in touch via email, Twitter, or GitHub and I’ll do my best to respond!\nOk, here goes."
  },
  {
    "objectID": "posts/2021-05-12-greent-how-to/index.html#how-did-i",
    "href": "posts/2021-05-12-greent-how-to/index.html#how-did-i",
    "title": "greenT part 2: Behind the app",
    "section": "How did I:",
    "text": "How did I:\nHere, I’ll discuss some of the app’s parts in more detail, in the spirit of providing ever-more resources for Shiny developers. I’m going to focus on things I struggled with, because most likely, if I didn’t struggle, the answer is available on Google somewhere.\nOf course, you’re also welcome to look at my code, on GitHub. The main scripts are ‘app.R’ (the main app script) and ‘defs.R’ (which defines some supporting functions). Then ‘about.R’ and ‘contribute.R’ just have a lot of long text, to avoid cluttering up the main script with it.\n\nChange the font across the entire app?\nJonathan created a file called ‘tea-style.css’. It lives inside the folder ‘www/’ in the main app directory. The file path written using the here package is here::here(\"www\", \"tea-style.css\").\n\nGetting the font\nInside ‘tea-style.css’, I import the font I want to use, like this:\n@import url('https://fonts.Googleapis.com/css2?family=Baloo+2&display=swap');\nThat URL comes from Google Fonts, which is where I found Baloo 2, the font that I decided to use. I clicked on it to see the different styles (weights, italic, etc.) and selected the one that I liked by clicking “Select this style” on the right.\n\n\n\n\n\nChoosing a style from the Baloo 2 font\n\n\n\n\nClicking that + sign popped open a dialog on the right. I chose the ‘import’ option instead of &lt;link&gt;, and then copied the import code within the &lt;style&gt; tag.\n\n\n\n\n\nCopying code to import Baloo\n\n\n\n\n\n\nApplying the font\nThen, in the same ‘tea-style.css’ file, I added this code:\n* {\nfont-family: 'Baloo 2', sans-serif;\n}\nThe * tells css to assign that font to all text in the app, not just a particular class of element. The ‘sans-serif’ after the name of the font tells the app to default to a generic sans-serif font if Baloo 2 were to be unavailable. And don’t forget the semicolon at the end of the line!\n\n\n\nMake the title and subtitle have two different formats?\nGooood question. I don’t really know html and css. In this case I kind of Googled around until I found something that worked. And I completely despaired of being able to get the title to be large, so I asked Jonathan, and he showed me where to put the font size. Here’s the relevant code snippet, within the Shiny UI:\n\n# Title and subtitle, two different formats\ntitlePanel(div(HTML(\"&lt;b style = 'font-size: 30px;'&gt;greenT&lt;/b&gt;&lt;em&gt;&lt;small&gt;\n                    exploring grapheme-color synesthesia&lt;/em&gt;&lt;/small&gt;\")),\n           # windowTitle controls what shows up on the browser tab\n           windowTitle = \"greenT\")\n\n\n\nPlot the colored blocks?\nJust some ggplot magic!\n\nMaking the plot\nHere’s the ggplot code that plots the rectangles. If you want to fully understand the data structure that goes into the plot, you’ll have to take a look at the app and trace everything back: rectangleDF() is a reactive expression that depends on all the color inputs and the text that the user enters.\nI use geom_rect to make rectangles, defining their dimensions so that they plot right up against each other. I had to use scale_fill_identity so that the rectangles would be filled with the literal color values included in the input data frame, instead of ggplot’s default behavior, which is to map colors to values based on an external color palette.\ntheme_void() gave me a totally blank background–no axis labels, no ticks, no nothing. I wanted the plot to read as “an image of colored rectangles”, rather than as “a ggplot”.\n\n# Plot color blocks -------------------------------------------------------\nplotVals &lt;- reactiveValues() # initialize a reactiveValues object to store the plot object\noutput$colorBlocks &lt;- renderPlot({\n  p &lt;-  rectangleDF() %&gt;%\n    ggplot() +\n    geom_rect(aes(xmin = xmin, xmax = xmax,\n                  ymin = ymin, ymax = ymax, \n                  fill = hex))+ # fill w hex colors\n    scale_fill_identity()+ # take the literal hex values as colors, instead of mapping other colors to them.\n    theme_void() + # totally blank background\n    {if(input$showLetters)geom_text(aes(x = xmin + 0.5, \n                                        y = ymin + 0.3, \n                                        label = grapheme,\n                                        col = contrastColor),\n                                    size = 10,\n                                    family = \"Baloo 2\")}+\n    scale_color_identity()\n  plotVals$rectanglePlot &lt;- p\n  print(p)\n})\n\n\n\nConditionally displaying letters\nThen, I included a conditional layer: only add the letters if the interactive toggle switch is TRUE; otherwise remove the layers. I often find myself wanting to make conditional layers, especially in Shiny, and I can never remember the syntax on the first try. I refer back to Stack Overflow posts like this one. Again with the community!\nNote that I was having trouble getting the ggplot to show up until I assigned it to a variable, p, and then included the print(p) statement at the end. Not sure why, but this worked.\nThere are two other interesting pieces of code here that work together with other parts of the app:\n\n\n\nChange the color of the ggplot letters based on the rectangle color?\nI took the same approach for the text color as for the rectangle background colors. I encoded the text color (either #FFFFFF/white or #OOOOOO/black) in the dynamically-created input data frame (a reactive expression) and then used scale_color_identity() to tell ggplot to use those literal hex values to color each letter, instead of mapping other colors onto them. You can see the scale_color_identity() code in the plot code snippet above.\nThe tricky part was dynamically assigning each letter to either white or black based on the chosen background color. I figured I shouldn’t need to reinvent the wheel here. Surely web designers have already figured out how to do this. Once again, I Googled, and I found this post, which gives a handy formula for calculating the best contrast color based on the rgb values of the background. The recommended threshold value in that post is 186; I fiddled around and ended up settling on 140 because, I don’t know, it just looked better to me.\nTo calculate these colors, I had to convert my color hex codes into individual r, g, and b values, which I did using the col2rgb() function.\nHere’s the full code I used for those color computations. Incidentally, you’ll notice that the reactive expression being calculated here is rectangleDF(), which becomes the input to the plot code I shared above.\n\n# Create df input for the ggplot ------------------------------------------\nrectangleDF &lt;- reactive({\n  req(length(split()) &gt; 0) # will only work when there is text entered in the box\n  data.frame(grapheme = split(),\n             ymin = 1,\n             ymax = 5) %&gt;%\n    mutate(xmin = 1:nrow(.), xmax = 2:(nrow(.)+1)) %&gt;%\n    left_join(colorsDF(), by = \"grapheme\") %&gt;%\n    mutate(r = col2rgb(hex)[1,],\n           g = col2rgb(hex)[2,],\n           b = col2rgb(hex)[3,]) %&gt;%\n    mutate(contrastColor = case_when((r*0.299 + g*0.587 + b*0.114) &gt; \n                                       140 ~ \"#000000\",\n                                     TRUE ~ \"#FFFFFF\"))\n})\n\n(I thought about giving line numbers for the code, but I plan to keep editing this app, so the line numbers would keep changing. You can use ctrl+F in the app.R script, though)\n\n\nSave the rectangle plot as an image?\nThis part was surprisingly easy, actually! Shiny has a nice downloadHandler() functionality that has two parts: one where you define the content you want to download, and one where you define the (dynamically-created) file name. The syntax is a little weird, so I copied and pasted the code from the Shiny docs and then filled in my parts.\nI’ve reproduced the download code below. The filename function converts the user-entered text to lowercase and replaces all non-alphanumeric characters to underscores, so we get a nice file name consisting of underscore-separated words. Then I append a nicely formatted date.\nNext, I need to define the object to be downloaded–in this case, the rectangle plot. Take a look back at the ggplot code I posted above. You might have been confused by this line, at the top: plotVals &lt;- reactiveValues(); and this line, at the bottom: plotVals$rectanglePlot &lt;- p. What we’re doing there is defining a reactiveValues object that gets updated each time that the ggplot re-renders.\nNow, inside the content function in the downloadHandler, I ggsave() the currently-displayed plot (plotVals$rectanglePlot).\n\n# Download rectangles plot as image ---------------------------------------\noutput$downloadPlot &lt;- downloadHandler(\n  filename = function(){\n    paste0(str_replace_all(tolower(input$displayText),\n                           \"[^a-z0-9]\", \"_\") %&gt;% \n             str_replace_all(., \"_{2,}\", \"_\"), \n           \"_\",\n           dateTimeFormat(),\n           '.png')\n  },\n  \n  content = function(file){\n    req(plotVals$rectanglePlot)\n    ggsave(file, plot = plotVals$rectanglePlot, \n           device = 'png', width = length(split())/2, \n           height = 5/2)\n  })\n\n\n\nMake the contribution form?\nI closely followed Dean Attali’s tutorial, in most cases using his code directly. Of course, I wrote my own form questions.\nThere are three main differences between my approach and Dean’s.\n\nWhile Dean collected responses that would be added to an existing data sheet, each as a new line, I wanted to save a whole data frame per response. For that reason, my contributionData() reactive expression does a bunch of data reformatting. In the following code, I bind together the color data that the user has previously entered (co-opting the colorsForExport() reactive expression that I created in order to allow the user to download the color data as a csv) and the responses that the user gave to the demographic questions in the form.\nOf course, this relies on the user having previously entered their color data on the Explore page before filling out a form. I added a mandatory checkboxInput with text to this effect.\nI actually don’t love this approach. I think it would be less confusing for the user to have a “mirror” of the Explore tab’s color selectors show up on the Contribute page, so they could tweak their colors before saving the form. I don’t know if it’s possible to have a single input widget show up in multiple places in a Shiny app (so that changing it in one place will automatically also change it in the other places), and I suspect it’s not.\nSo in order to make this work, I would have to program a whole new set of color selectors, and then add some logic that updates each selector in response to a change in its mirror, and vice versa. I’m sure this is possible, but I don’t know how to do it off the top of my head, and I left it out for the sake of time.\nI added some dynamic question options. I wanted respondents to be able to self-describe their gender identity. Also, for the question at the end about different types of synesthesia, I wanted respondents to be able to include types that I hadn’t listed. I listed most of the major synesthesia types I could find based on my research, but you never know!\nThis turned out to be pretty simple, using the uiOutput/renderUI pair of functions. Here’s a snippet of code from the UI portion of the form:\n\n\n# (more form questions above)\nradioButtons(\"gender\", labelMandatory(\"What is your gender identity?\"),\n             choices = c(\"woman\", \"non-binary\", \n                         \"man\", \"prefer not to say\", \n                         \"prefer to self-describe (click to add text)\"), \n             selected = character(0), width = \"100%\"),\nuiOutput(\"genderSelfDescribe\"), # here's the uiOutput that dynamically generates a new question if the respondent wants to self-describe their gender.\nradioButtons(\"sex\", labelMandatory(\"Sex assigned at birth:\"),\n             choices = c(\"female\", \"male\", \"intersex\", \n                         \"prefer not to say\"), \n             selected = character(0), width = \"100%\"),\n# (more form questions below)\n\nSandwiched between the gender and sex questions, the line uiOutput(\"genderSelfDescribe\") allows a dynamically-generated question to appear if the respondent selects “prefer to self-describe” in the gender question.\nHere’s the code on the server side that makes this possible:\n\n# Contribute form -------------------------------------------------------\n# Dynamic options\n## self-describe gender\noutput$genderSelfDescribe &lt;- renderUI({\n  req(input$gender)\n  if(!input$gender == \"prefer to self-describe (click to add text)\"){\n    return(NULL)\n  }else{\n    textInput(\"genderSelfDescribe\", \n              label = NULL, \"\")\n  }\n})\n\nAnd then of course, there’s similar code to provide a dynamic option for the free-text synesthesia types question.\n\nWhile Dean’s tutorial describes saving responses using persistent data storage on the server where the Shiny app is hosted, he also points out that this isn’t possible on shinyapps.io. So I decided to use one of the other options that he outlines in the follow-up to the original tutorial: storing the data on Google Drive uisng the Googlesheets4 package.\n\n\n\nSave the contributed data to Google Drive?\nIt took me a while (lots of trial and error, and lots of Google searches that I can’t reproduce) to figure out how to get the data saving to Google Drive to work.\nBasically, here’s the challenge. In order to read and write to Google Drive, you have to “authenticate”, i.e. “log in” to an account. That makes sense–of course it would be bad if I could make an app that could modify files in some random other person’s account with impunity.\nBut, typically when we authenticate Google Drive (or anything else) from an R script, the package does a little “dance” with your web browser. You run the code command to authenticate, and then a browser window pops open and prompts you to enter your password. You do that, and then the code will run back in your RStudio window.\nThat setup works fine for interactive programming, but it doesn’t work for a Shiny app. First of all, it would be super annoying for app users to have to deal with a separate browser popup just in order to be able to submit their forms. And more to the point, it wouldn’t help anyway–because they’d have to log into my Google account! So that’s not possible or desirable.\nThat means that in order to write data to Google Drive directly from my Shiny app, I’ll have to use “non-interactive authentication” via a secret “token”.\nHere’s how I did that.\n\nSetup\nFirst, I had to authenticate interactively one time, in order to set things up. To do this, I first created a hidden directory inside my main Shiny project and called it “.secrets”. To do this, I opened up the Terminal window inside RStudio. (You can also do this with the Terminal app, or the equivalent, on your computer–it doesn’t have to be through RStudio.)\n\n\n\n\n\nMaking the .secrets directory\n\n\n\n\nFirst, I checked to make sure I was in the root project directory by typing ls and checking what other files were there. Alternatively, you could print the working directory with pwd.\nOnce I determined that I was indeed in the root directory, I typed mkdir .secrets. The . before ‘secrets’ will make the directory hidden.\nNext, and this is important! I hid ‘.secrets’ from being tracked by git. It’s a good idea to do this right at the beginning to make sure you don’t forget. You definitely do not want your private access token to end up on GitHub for all the world to see!\nIf you have git running through RStudio, an easy way to do this is to go up to the git panel, click the gear icon, and then click “Ignore”. This will open the .gitignore file. Now just add ‘.secrets’ as a new line in the .gitignore file to ignore the entire contents of the secrets directory. If you’re more comfortable using the terminal, you can of course open the .gitignore using nano .gitignore or similar.\n\n\n\n\n\nOpening the .gitignore file\n\n\n\n\nOkay, now we need to load the googlesheets4 and gargle packages. gargle manages token authentication, and googlesheets4 is what we’ll use to write the data to Google Sheets.\n\nlibrary(googlesheets4) # we'll use this for writing to google sheets\nlibrary(gargle) # for authentication/tokens\n\nNext, set some options(). You can do this part in the console–it only needs to be done once. You’re just telling gargle where to save the token that you’re about to generate.\n\noptions(gargle_oauth_email = \"kaija.gahm@aya.yale.edu\", # the email I wanted to use for the app\n        gargle_oauth_cache = \".secrets\") # \n\n\n\nGet a token\nIn order to actually generate a token, type gs4_auth() in the console. This should open up a window in your browser that will prompt you to sign in to your Google account. If you, like me, have multiple Google accounts (I have five right now), double-check that you’re signing into the same account that you specified in the options() call above. That’s the account whose Drive you’ll be writing to from your app.\nOnce you’ve authenticated, you should get a plain-looking screen that tells you the authentication is complete. You can close that window and go back to R now. (This is the auth “dance” I mentioned earlier).\nNow, double-check that your token got added to your ‘.secrets/’ directory. It should get put there automatically because of the options you set. If it didn’t, try re-running the options() code above and re-trying the authentication.\nI checked the contents of the ‘.secrets/’ directory by using the Terminal window in RStudio to navigate into ‘.secrets/’ and then list the files inside.\n\ncd .secrets\nls\n\nYou should see something like nfo674ndu6e8gh50p24q2nm8hk3a6e0k_kaija.gahm@aya.yale.edu (obviously that’s not my real token, but it has the same format–a string of numbers and letters, followed by an underscore and then your email address.)\n\n\nNon-interactive authentication\nOkay. Now you have a token. Phew! The next step is to set up non-interactive authentication. I did this by following this vignette. It’s really long. Don’t panic! The section you want is Project-level OAuth cache.\nYou’ll notice that the first part of this section gives instructions on how to do basically what we just did: create a “.secrets/” directory and use a one-time interactive authentication to store a token in it. Here, they use the googledrive package as an example. My example above used googlesheets4 instead, but it’s the same process.\n\n\n\n\n\nMy alphabet\n\n\n\n\nNow, follow the rest of the steps in this tutorial. They include adding this code at the top of your app, which you’ll see at the top of my own app.R file.\n\noptions(\n  gargle_oauth_cache = \".secrets\",\n  gargle_oauth_email = TRUE\n)\n\n\n\nNotes and caveats\nNote that there are other approaches to non-interactive authentication that use a Google service account. I tried to get this set up and didn’t have any luck–or rather, I got it set up, but then the process of actually accessing the data in a Google service account is complicated and I gave up and followed this tutorial instead with my personal account. For a small, personal app like greenT, that’s fine. If you want to implement something bigger or more sensitive, you should look into that approach. Maybe you’ll succeed where I didn’t. A warning: the Google API website is one of the most confusing sites I’ve ever tried to navigate, and I’m no Luddite.\nOne more note on saving the form data to Google Sheets. Ideally, I would want each respondent’s data to be saved as its own sheet, and I’d want those sheets to be stored in a designated folder in my Google Drive. Unfortunately, and counter-intuitively, this turns out to be hard to do.\nThe googledrive package in R is designed for interacting with Google Drive file structures, while the googlesheets4 package is built to deal with individual Google Sheets files, but not so much with their organization within Google Drive. If you’re used to working with Google spreadsheets stored on Google Drive the normal way (i.e. through the web interface), it’s jarring to have these processes separated.\nI spent a while trying to find the functionality in googlesheets4 that would allow me to organize files. Finally, I came across this issue on the googlesheets4 GitHub page, where Jenny Bryan explains the separation of functionality between these two packages. She subsequently wrote a vignette on working with the two packages together. I followed the vignette and had a whole nice workflow set up where the data got written to a google sheet that was then moved to a ‘greenT/’ directory I had pre-created on Google Drive. But because both packages had to make calls to the googledrive and googlesheets4 API’s, the whole thing was too slow, and the user had to wait an inordinately long time for their form response to submit.\nI’m sure there’s a way to speed this up, but I needed to have it working on a short timeline, so I ended up sticking with individual google sheets for each response, stored in my main Google Drive. Not ideal, but I added a ‘greenT_’ prefix to each file name so at least I’ll be able to find them easily. (Note: the code snippet I’m reproducing here lives in ‘defs.R’ within my app.)\n\n# Function to save form data ----------------------------------------------\nsaveData &lt;- function(data) {\n  fileName &lt;- sprintf(\"%s_%s_%s\",\n                      \"greenT\",\n                      dateTimeFormat(),\n                      digest::digest(data))\n  \n  # Create an empty spreadsheet\n  ss &lt;- gs4_create(name = fileName,\n                   sheets = \"data\")\n  \n  # Put the data.frame in the spreadsheet and provide the sheet_id so it can be found\n  sheet_write(data, ss, sheet = \"data\")\n}\n\n\n\n\nWork efficiently with all 36 color selectors?\nSince the app requires assigning a color to each letter (26) and digit (10), we have 36 color selectors to deal with, each with its own inputId. I called the letter selectors input$a, input$b, etc., and I called the number selectors input$one, input$two since there are annoying hoops to jump through if you want to make a number into a variable.\n36 is a lot of individual variables to type out. Frustratingly, it’s right on the cusp of what I’m willing to do manually–few enough that manual listing is possible, but enough that it’s a serious pain, especially if you have to list them out more than once.\nUltimately, then, I opted to deal with the color selectors programmatically. It was a little tricky to figure out, in part because there are three really three different lists of selectors.\n\nMaking some vectors\n\nThe inputId’s of the selectors. As I explained above, this is a combination of the letters of the alphabet (lowercase) with the spelled-out digits, “zero” through “nine”.\nThe display names of the selectors. For some arbitrary reason I decided I wanted them to display as uppercase letters and digits. Not sure why I did that. In retrospect, since everything shows up as lowercase in the ggplot, maybe I should have gone with lowercase. But regardless: the display names end up being c(A:Z, 0:9).\nThe characters that the selectors represent. This is important because I have to compile a data frame of all the selector input colors, to join to a data frame created from the text that the user entered. Since that text gets converted to lowercase, the selector inputs also have to be assigned lowercase letters in order to match up. So for this, we need yet another vector, c(a:z, 0-9). This is also how I want the characters to print out in the downloadable csv data. Lowercase just seems more standard and appropriate in that case.\n\nYeah, as I’m typing this I’m realizing that I really should have just combined steps 2 and 3 and gone with lowercase display labels. Oops. Note also: this ignores the possibility that someone might have different colors associated with uppercase and lowercase letters. That isn’t true for me, but it is true for at least one of my testers. Maybe I’ll add that functionality in the future!\nAnyway. I went ahead and defined these three vectors in my ‘defs.R’ script, like this:\n\ninputIds &lt;- c(letters, c(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \n                         \"six\", \"seven\", \"eight\", \"nine\"))\ndisplayNames &lt;- c(LETTERS, 0:9)\ncharactersOut &lt;- tolower(displayNames)\n\nThen, I could use those vectors to operate on all of my inputs at once, using functions like lapply and map2.\nFor example, let’s take a look at how I created the individual colourInput objects to display on the main page of the app.\n\n\nExample: Creating the selectors\nFirst, I defined a function, colorInit():\n\n# Function to create inputs -----------------------------------------------\ncolorInit &lt;- function(x = .x, y = .y){\n  colourpicker::colourInput(x, y, value = randomColor(), showColour = \"background\")\n}\n\nThe .x and .y are default inputs because I know I’ll be using this function in a call to map2(). value = randomColor() initializes each selector with a random hex code when the app initially loads. And showColour = \"background\" shows the chosen color as the background of the selector, not as hex code text.\nNow, I can call this function in order to render the colorInputs in the UI. The column() code below had to be repeated 6 times (6 total columns) in the UI. There’s probably a way to streamline even that part of things, but I didn’t mind repeating myself 6 (rather than 36) times, and I didn’t want to write another function.\n\nfluidRow(\n  # ... (other columns)\n  column(width = 2,\n         purrr::map2(.x = horiz(inputIds)[7:12], \n                     .y = horiz(displayNames)[7:12], \n                     colorInit)\n  )\n  # ... (more columns)\n) # 6 columns in total\n\nSo, let’s take a look at this code. First, I’ve created a fluidRow() that will serve as the horizontal strip where all the color inputs are housed in the UI. Because I know I want to lay out the selectors in a 6x6 grid, I create 6 column() definitions, each with width 2 (a width of 12 means “take up the full page”, so dividing that by 6 gives a width of 2 for each column).\nThen, I use map2() to render the inputs. I define two arguments, .x and .y. (Ignore the horiz() function for now–I’ll talk about that in a second.) .x is going to be the inputId’s of the color selectors, so for that I can use inputIds, one of the three vectors I created in the previous step. .y is going to be the labels, or what actually gets displayed next to the selctors. So for that, I can use displayNames, the vector I created that includes capital letters and digits. Finally, colorInit is the .f argument (which I probably should have labeled as such–oops.) So, map2() passes .x and .y into that colorInit() function that I just defined, and for each element of the input vector, it creates a colourInput() object with inputId taken from the .x vector and label taken from the .y vector.\n\n\nArranging the letters horizontally\nCool, okay. So now let’s talk about the horiz() function, and also those indices [7:12]. The input vectors I created are, naturally, in alphabetical order, from A-Z and then 0-9. But I’m creating my inputs in 6 columns. If I populated the columns in order of that vector (for example, using elements [1:6] for the first column; [7:12] for the second column), I’d end up with the alphabet going down the columns instead of across rows.\nThat’s fine, I guess, but I find it more naturally to read left to right, top to bottom (instead of top to bottom, left to right). I want the top left selector to be A, and then the one directly to its right to be B, because I think that’s what the user will expect.\nSo, I created a function called horiz(). Here it is:\n\n# Function to reorganize the inputs horizontally --------------------------\nhoriz &lt;- function(vec = inputIds, nrow = 6, ncol = 6){\n  mat &lt;- matrix(vec, nrow = nrow, ncol = ncol, byrow = T)\n  horizVec &lt;- c(mat)\n  return(horizVec)\n}\n\nhoriz() takes my (alphabetically-ordered) vector as input. It then generates a matrix from that vector, with byrow = T (i.e. laying out the vector in rows, not in columns–the way I want it!). Next, it uses c() to collapse that matrix back down into a vector. Because R works on columns by default, the matrix will be collapsed column-wise, not row-wise. So the vector returned will be c(\"a\", \"g\", \"m\", \"s\", \"y\", \"4\", \"b\", \"h\", \"n\", \"t\")… etc. etc.\nSo now, I can use the elements of that vector, 6 at a time, to populate and name the color selectors for each column.\nIn the case of the code snippet above that uses map2(), I’m making the second column, so I use elements [7:12] of each transformed vector. horiz(inputIds)[7:12] gives me c(\"b\", \"h\", \"n\", \"t\", \"z\", \"5\"), and horiz(displayNames)[7:12] gives me c(\"B\", \"H\", \"N\", \"T\", \"Z\", \"5\").\nYou might be wondering why I went to all this trouble. Why not just make the selectors row-wise, instead of column-wise?\nThere definitely might be a good way to do this (please share it if you know how!) but I couldn’t figure it out. It’s not trivial to align things using CSS, and I think that’s what I would have had to do in order to ensure equal spacing. I know R and I don’t know CSS, so I ended up going with the R-centric solution. Besides, I got to feel clever writing functions and such."
  },
  {
    "objectID": "posts/2021-05-12-greent-how-to/index.html#get-involved",
    "href": "posts/2021-05-12-greent-how-to/index.html#get-involved",
    "title": "greenT part 2: Behind the app",
    "section": "Get involved",
    "text": "Get involved\nThat’s it for specific notes on the code for this app! If you’re curious about the rest of the code, please check out the repository, which is publicly available here. If you have specific questions, you can email me, and I’ll try to get back to you (but no promises).\nI also welcome contributions, if you’re interested in making this app better! Go ahead and file an issue or submit a pull request on GitHub. I’m going to be busy over the coming months and I’m not sure how much time I’ll have to work on this, so I may not be actively responding to issues. But I welcome any and all contributions or ideas for the future.\nIf you haven’t already checked out my first blog post about this app, you can read it here. And the app itself lives here.\nThanks for reading."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kaija Gahm",
    "section": "",
    "text": "I am a biologist and data scientist. Currently, I’m studying the social behavior and movement ecology of griffon vultures in the Pinter-Wollman Lab. Previously, I was a data manager at the Cary Institute and a research assistant with the Yale Grammatical Diversity Project. I’ve written about my work with each of these organizations: Cary | YGDP.\nI did my B.S. in EEB at Yale, where I studied physiological tradeoffs in wood frog tadpoles (talk | paper).\nI advocate for open and reproducible data science and help others to apply these ideas to their own work. I run “Hacky Hours” at UCLA, and I’m on the Board of Directors for SORTEE. I teach workshops with The Carpentries, and I’m currently developing a Carpentries workshop of my own!"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Kaija Gahm",
    "section": "",
    "text": "I am a biologist and data scientist. Currently, I’m studying the social behavior and movement ecology of griffon vultures in the Pinter-Wollman Lab. Previously, I was a data manager at the Cary Institute and a research assistant with the Yale Grammatical Diversity Project. I’ve written about my work with each of these organizations: Cary | YGDP.\nI did my B.S. in EEB at Yale, where I studied physiological tradeoffs in wood frog tadpoles (talk | paper).\nI advocate for open and reproducible data science and help others to apply these ideas to their own work. I run “Hacky Hours” at UCLA, and I’m on the Board of Directors for SORTEE. I teach workshops with The Carpentries, and I’m currently developing a Carpentries workshop of my own!"
  },
  {
    "objectID": "index.html#cv",
    "href": "index.html#cv",
    "title": "Kaija Gahm",
    "section": "CV",
    "text": "CV\nDownload a recent copy of my CV."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Kaija Gahm",
    "section": "Education",
    "text": "Education\nUniversity of California, Los Angeles | Los Angeles, CA Ph.D. Student in Ecology & Evolutionary Biology | September 2021 - Present. NSF Graduate Research Fellow 2023; UCLA Graduate Dean’s Research Fellow 2021.\nYale University | New Haven, CT | B.S. in Ecology & Evolutionary Biology | September 2016 - May 2020"
  },
  {
    "objectID": "index.html#work",
    "href": "index.html#work",
    "title": "Kaija Gahm",
    "section": "Work",
    "text": "Work\nCary Institute of Ecosystem Studies | Database Specialist | June 2020 - August 2021\nYale Grammatical Diversity Project | Research Assistant | September 2018 - March 2021\nYale Peabody Museum of Natural History | Student Museum Assistant (Entomology) | September 2016 - May 2020"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Kaija Gahm",
    "section": "Contact",
    "text": "Contact\nI’d love to hear from you! You can find me online using the links to the left, or email me at kgahm [at] ucla.edu."
  }
]