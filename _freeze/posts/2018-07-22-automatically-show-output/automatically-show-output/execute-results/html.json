{
  "hash": "75027237e25212c2f3c29cb6f3aa45b0",
  "result": {
    "markdown": "---\ntitle: \"(Automatically show output)\"\ndescription: |\n  A neat trick with parentheses to print the contents of an object you just created, without running another line of code.\nauthor:\n  - name: Kaija Gahm\n    url: {}\ndate: 07-22-2018\noutput:\n  distill::distill_article:\n    self_contained: false\n    highlight: kate\n---\n\n\n\n\n*This post has been slightly modified from its original form on [woodpeckR](https://thewoodpeckr.wordpress.com/2018/07/22/automatically-show-output/).*\n\n### Problem\n\nIt's annoying to have to type the name of an object I just created in order to print its output.\n\n### Context\n\nA certain [lightsaber-wielding stats professor](https://environment.yale.edu/profile/ruening-scherer) of mine liked to point out that R doesn't go out of its way to be helpful. If you write a line of code that creates an object and then run that line of code, there's no message to tell you that the object has been successfully created. R doesn't say \"Task complete! What's next?\" or otherwise give you any indication that anything has happened. To actually view the object you just created, you have to type its name or run some other command on it.\n\nOnce in a while, this lack of transparency can be frustrating. What if I want to save objects and also view them in real time as they are created? Say I've used the handy `prop.table` function to [transform a frequency table into a proportion table](https://kaijagahm.netlify.app/posts/2018-07-22-proptable/). I'd like to be able to view `prop`, `prop.1` and `prop.2` without typing their names and adding extra lines of code.\n\n### Solution\n\nThe same lightsaber-wielding stats professor who wished R would be a little more communicative taught me a trick to do just this: encase a command in parentheses to automatically print its output when it runs. Hence,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data from GitHub\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\npolygon <- read.csv(\"https://tinyurl.com/rta6hkbo\")\n\n(prop <- with(polygon, table(revetment, pool)) \n %>% prop.table())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment          4          8         13\n        0 0.13472486 0.37760911 0.19544592\n        1 0.10815939 0.10056926 0.08349146\n```\n:::\n:::\n\n\n...returns the same thing as leaving out the parentheses and typing the name of the object, `prop`, on a new line:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nprop <- with(polygon, table(revetment, pool)) %>%\n  prop.table()\n\nprop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment          4          8         13\n        0 0.13472486 0.37760911 0.19544592\n        1 0.10815939 0.10056926 0.08349146\n```\n:::\n:::\n\n\nAlso note that this is different (better) than just running the command without the assignment arrow, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(polygon, table(revetment, pool)) %>% \n  prop.table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment          4          8         13\n        0 0.13472486 0.37760911 0.19544592\n        1 0.10815939 0.10056926 0.08349146\n```\n:::\n:::\n\n\n...because the above doesn't save the table you created, it just shows it to you once.\n\n### Outcome\n\nCreate objects and view them at the same time, while saving some typing. This is also great for use in RMarkdown, because it will print the output below the code chunk without your having to add another line of code.",
    "supporting": [
      "automatically-show-output_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}