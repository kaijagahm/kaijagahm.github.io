{
  "hash": "62ae2b7bc6e75728d58b1ed7a32ea0d5",
  "result": {
    "markdown": "---\ntitle: \"prop.table()\"\ndescription: \"Making a frequency table with proportions instead of counts. Preview image from https://twitter.com/lyric_rep/status/1010594530435846144.\"\nauthor:\n  - name: Kaija Gahm\n    url: https://kaijagahm.github.io\n    orcid: 0000-0002-4612-4426\n    affiliation: Yale University\ndate: 07-22-2018\nimage: propTable.jpg\ncategories: [R] # self-defined categories\ncitation: \n  url: https://kaijagahm.github.io/posts/2018-07-22-proptable\ndraft: false\n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Image from https://twitter.com/lyric_rep/status/1010594530435846144](propTable.jpg){width=596}\n:::\n:::\n\n\n*This post has been slightly modified from its original form on [woodpeckR](https://thewoodpeckr.wordpress.com/2018/07/22/prop-table/).*\n\n### Problem\n\nHow can I convert a frequency table into proportions?\n\n### Context\n\nThis is a continuation of the data manipulation discussed in the `with()` post. I had just finished making a table\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data from GitHub\npolygon <- read.csv(\"https://tinyurl.com/rta6hkbo\")\n\n# Two-way table by pool and revetment\nwith(polygon, table(revetment, pool))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment   4   8  13\n        0  71 199 103\n        1  57  53  44\n```\n:::\n:::\n\n\nWhat if I want to see this table broken down by *proportion* of polygons, not counts?\n\n## Solution\n\nThe `prop.table()` function will do this nicely.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nprop <- with(polygon, table(revetment, pool)) %>% \n  prop.table()\n\nprop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment          4          8         13\n        0 0.13472486 0.37760911 0.19544592\n        1 0.10815939 0.10056926 0.08349146\n```\n:::\n:::\n\n\nBy default, the proportions are calculated over the entire table. So each cell represents the proportion *of all polygons* that are in that pool with that value of revetment. The whole table sums to 1.\n\nIf you want proportions across rows or down columns, all you need to do is add the `margin =` argument.\n\n`margin = 1` sums across rows. Each row sums to 1. This would answer the question, \"What proportion of the polygons [with, or without] revetment are located in each of the three pools?\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.1 <- with(polygon, table(revetment, pool)) %>% \n  prop.table(margin = 1)\n\nprop.1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment         4         8        13\n        0 0.1903485 0.5335121 0.2761394\n        1 0.3701299 0.3441558 0.2857143\n```\n:::\n:::\n\n\n`margin = 2` sums down columns. Each column sums to 1. This would answer the question, \"What proportion of the polygons in [pool] have revetment? (or, what proportion don't have revetment?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.2 <- with(polygon, table(revetment, pool)) %>% \n  prop.table(margin = 2)\n\nprop.2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment         4         8        13\n        0 0.5546875 0.7896825 0.7006803\n        1 0.4453125 0.2103175 0.2993197\n```\n:::\n:::\n\n\n### Outcome\n\nHandy function for creating proportion tables.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}