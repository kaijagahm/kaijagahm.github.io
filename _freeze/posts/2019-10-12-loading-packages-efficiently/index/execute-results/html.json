{
  "hash": "550f493309b333f58d00c3d8a0a7cc0f",
  "result": {
    "markdown": "---\ntitle: \"Loading packages efficiently\"\ndescription: \"A trick I sometimes use to load a whole bunch of packages for every script in a project, while saving myself some typing. (Preview image from https://towardsdatascience.com/a-comprehensive-list-of-handy-r-packages-e85dad294b3d).\"\nauthor:\n  - name: Kaija Gahm\n    url: https://kaijagahm.github.io\n    orcid: 0000-0002-4612-4426\n    affiliation: Yale University\ndate: 10-12-2019\nimage: pkgs.png\ncategories: [R] # self-defined categories\ncitation: \n  url: https://kaijagahm.github.io/posts/2019-10-12-loading-packages-efficiently\ndraft: false\n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Image from [towards data science](https://towardsdatascience.com/a-comprehensive-list-of-handy-r-packages-e85dad294b3d)](pkgs.png){width=130%}\n:::\n:::\n\n\n*This post has been slightly modified from its original form on [woodpeckR](https://thewoodpeckr.wordpress.com/2019/10/12/loading-packages-efficiently/).*\n\n### Problem\n\nEspecially in a project with many different scripts, it can be challenging to keep track of all the packages you need to load. It’s also easy to lose track of whether or not you’ve incorporated package loading into the script itself until you switch to a new computer or restart R and all of a sudden, your packages need to be re-loaded.\n\n### Context\n\nWhen I was first starting out in R, I learned quickly to load packages all together at the top of a script, not along the way as I needed them. But it took a while, until I started using R Projects, before I decided to centralize package loading above the script level. I was sick of having to deal with loading the right packages at the right times, so I decided to just streamline the whole thing.\n\n### Solution\n\nMake a separate R script, called “libraries.R” or “packages.R” or something. Keep it consistent. Mine is always called “libraries,” and I keep it in my project folder.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](files.png){width=150%}\n:::\n:::\n\n\nThe script looks something like this (individual packages may vary, of course):\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](libraries.png){width=150%}\n:::\n:::\n\n\nThen, at the top of each analysis script, I can simply source the libraries script, and all the libraries I need load automatically.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](source.png){width=150%}\n:::\n:::\n\n\n### Outcome\nI can easily load libraries in the context of a single R Project, keep track of which ones are loaded, and not have to worry about making my scripts look messy with a whole chunk of `library()` commands at the top of each one. It’s also straightforward to pop open the “libraries” script whenever I want to add a new package or delete one.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}