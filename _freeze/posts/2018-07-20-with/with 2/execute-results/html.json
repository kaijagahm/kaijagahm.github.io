{
  "hash": "8c3a110da77f8585b7b011a77244b098",
  "result": {
    "markdown": "---\ntitle: \"with()\"\ndescription: |\n  A brief introduction to the with() function\nauthor:\n  - name: Kaija Gahm\n    url: {}\ndate: 07-20-2018\noutput:\n  distill::distill_article:\n    self_contained: false\n    highlight: kate\npreview: noPreview.png\n---\n\n\n\n\n### Problem\n\nMaking graphics with base R is annoying for many reasons, but a big one is having to type the name of the data frame over and over again to reference different columns.\n\n### Context\n\nBack to our Mississippi River fish data. I've aggregated my sampling points into polygons, and now I want to explore some of their characteristics. To do that, I'd like to make some tables and plots, and because these are just quick, exploratory plots, I don't feel like dealing with `ggplot`.\n\nLoad in the data (accessible on GitHub).\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\n# Load data from GitHub\npolygon <- read.csv(\"https://tinyurl.com/rta6hkbo\") \n\n# Look at what we're dealing with\ndim(polygon) # How big is the data set? \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 527  21\n```\n:::\n\n```{.r .cell-code}\nhead(polygon, 3) # Look at the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     poly_id propsnag n_points habitat_code pool      Area Perimeter max_depth\n1 P04_CFL_13   0.8000        5          CFL    4 105288.80  2067.890      1.30\n2 P04_CFL_14   0.2000        5          CFL    4  42668.28  1770.465      0.74\n3 P04_CFL_15   0.4375       16          CFL    4 678390.21  5226.963      2.68\n  avg_depth tot_vol shoreline_density_index pct_aqveg pct_terr pct_prm_wetf\n1 0.3625869   33955                1.797759 19.133960 93.87983     79.67522\n2 0.3291391    5953                2.417852 41.252704 94.76871     42.44244\n3 0.6159651  356757                1.790213  9.256465 86.17161     41.27248\n  med_dist_to_land med_dist_to_forest med_current wingdam revetment tributary\n1         34.13379           34.13379        0.02       0         1         0\n2         18.90166           32.64112        0.02       0         0         0\n3         21.40210           39.27576        0.01       1         1         1\n  pct_shallow_area\n1        0.9278354\n2        1.0000000\n3        0.9194788\n```\n:::\n:::\n\n\nFirst, I'd like to see how total volume `tot_vol` of the aquatic area scales with its `Area`.\n\nIn base R:\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\n# Formula notation\nplot(polygon$tot_vol ~ polygon$Area)\n# OR: \n\n# Comma notation\nplot(polygon$Area, polygon$tot_vol)\n```\n:::\n\n\nEither way, we get this:\n\n\n::: {.cell preview='false'}\n::: {.cell-output-display}\n![](with-2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nOr a more informative plot, with both variables on a log scale:\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\nplot(log(polygon$tot_vol) ~ log(polygon$Area))\n```\n\n::: {.cell-output-display}\n![](with-2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis isn't too too clunky, but if the data frame name or column names are long, it can get a little annoying.\n\n### Solution\n\nThe `with()` function allows you to specify the data frame your variables are coming from and then reference the variables with respect to the data frame, similar to the `ggplot` argument `data =`. Handy.\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\n# Plot using the with() function \nwith(polygon, plot(tot_vol ~ Area))\n```\n\n::: {.cell-output-display}\n![](with-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nYou can add any other arguments inside of the function, as normal, it's just now wrapped in `with()`.\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\n# Log-transform variables and make the points blue dots, because why not?\nwith(polygon, plot(log(tot_vol) ~ log(Area), # log-transform \n                   pch = 20, # dots instead of circles \n                   col = \"blue\", # make the dots blue \n                   main = \"Polygon volume by area, log-transformed\") # title \n     )\n```\n\n::: {.cell-output-display}\n![](with-2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nIt's worth noting that this works for other functions besides `plot()`, too. Here's an example with `table()`: let's look at how many sampling polygons include revetment, broken down by navigation pool (area of the river). The data set contains three navigation pools: 4, 8, and 13.\n\n\n::: {.cell preview='false'}\n\n```{.r .cell-code}\n# Two-way table by pool and revetment\nwith(polygon, table(revetment, pool))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         pool\nrevetment   4   8  13\n        0  71 199 103\n        1  57  53  44\n```\n:::\n:::\n\n\n### Outcome\n\nQuick plots and data manipulation made even quicker!\n\n### Resources\n\nDiscussion of when to use `with()`:\nhttps://stackoverflow.com/questions/42283479/when-to-use-with-function-and-why-is-it-good\n\n",
    "supporting": [
      "with-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}