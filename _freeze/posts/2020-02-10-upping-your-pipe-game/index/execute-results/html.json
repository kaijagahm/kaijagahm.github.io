{
  "hash": "9ecd3470c15fbf43ea935ec90adb7f70",
  "result": {
    "markdown": "---\ntitle: \"%$%: upping your pipe game\"\ndescription: \"I love the magrittr/dplyr pipe: %>%. But it's meant to work with tidyverse functions, and it doesn't always work well with base R functions that take a single data frame column as input. Here, I use data about my friends' pets to explain how a different magrittr pipe, %$%, solves that problem.\"\nauthor:\n  - name: Kaija Gahm\n    url: https://kaijagahm.github.io\n    orcid: 0000-0002-4612-4426\n    affiliation: Yale University\ndate: 02-10-2020\ncategories: [R] # self-defined categories\nimage: magrittr.jpg\ncitation: \n  url: https://kaijagahm.github.io/posts/2020-02-10-upping-your-pipe-game\ndraft: false \n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](magrittr.jpg){width=480}\n:::\n:::\n\n\n*This post has been slightly modified from its original form on [woodpeckR](https://thewoodpeckr.wordpress.com/2020/02/10/upping-your-pipe-game/).*\n\n## Problem\n\nWhat do I do when %>% doesn't work?\n\n## Context\n\nI love the `%>%` pipe. Originally from `magrittr`, it's now characteristic of most `tidyverse` code. Using `%>%` has revolutionized how I write code in R. But sometimes the basic pipe falls short.\n\n`table()` is one of my favorite functions for exploring data in R: it creates a frequency table of values in a vector. I use `table()` to do sanity checks on my data, make sure that all factor levels are present, and generally get a sense of how my observations are distributed.\n\nA while back, though, I noticed that `table()` didn't play nice with the `%>%` pipe.\n\nI've collected some data on my friends' pets. Here it is (using pseudonyms, in case anyone has a secret pet they don't want the world to know about...).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![This is one of the cats in the data frame below. She would like to hold your hand.](milge.jpg){width=150%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load magrittr\nlibrary(magrittr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\n# Create data\npets <- data.frame(\n  friend = c(\"Mark\", \"Mark\", \"Kyle\", \"Kyle\", \"Miranda\", \"Kayla\", \n             \"Kayla\", \"Kayla\", \"Adriana\", \"Adriana\", \"Alex\", \"Randy\", \"Nancy\"), \n  pet = c(\"cat\", \"cat\", \"cat\", \"cat\", \"cat\", \"dog\", \"cat\", \"lizard\", \n          \"cat\", \"cat\", \"dog\", \"dog\", \"woodpecker\"), \n  main_pet_color = c(\"brown\", \"brown\", \"multi\", \"multi\", \"brown\", \n                     \"brown\", \"brown\", \"orange\", \"black\", \"white\", \n                     \"multi\", \"white\", \"multi\")) \n\n# Look at the data\npets\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    friend        pet main_pet_color\n1     Mark        cat          brown\n2     Mark        cat          brown\n3     Kyle        cat          multi\n4     Kyle        cat          multi\n5  Miranda        cat          brown\n6    Kayla        dog          brown\n7    Kayla        cat          brown\n8    Kayla     lizard         orange\n9  Adriana        cat          black\n10 Adriana        cat          white\n11    Alex        dog          multi\n12   Randy        dog          white\n13   Nancy woodpecker          multi\n```\n:::\n:::\n\n\nUnsurprisingly, it looks like there are a lot of cats and dogs! There are also a lot of brown pets and a lot of multicolored ones. Let's say I want to see a frequency table of the pet colors. I know that I can do this with `table()`, like so:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a frequency table of pet colors\ntable(pets$main_pet_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n black  brown  multi orange  white \n     1      5      4      1      2 \n```\n:::\n:::\n\n\nBut if I want to use tidy syntax, I might try to do it this way instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npets %>%\n  table(main_pet_color)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: object 'main_pet_color' not found\n```\n:::\n:::\n\n\nWhat's up with this? The syntax should work. pet is definitely a valid variable name in the data frame pets, and if I had used a different function, like `arrange()`, I would have had no problems:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Arrange the data frame by pet color\npets %>% arrange(main_pet_color) # works fine!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    friend        pet main_pet_color\n1  Adriana        cat          black\n2     Mark        cat          brown\n3     Mark        cat          brown\n4  Miranda        cat          brown\n5    Kayla        dog          brown\n6    Kayla        cat          brown\n7     Kyle        cat          multi\n8     Kyle        cat          multi\n9     Alex        dog          multi\n10   Nancy woodpecker          multi\n11   Kayla     lizard         orange\n12 Adriana        cat          white\n13   Randy        dog          white\n```\n:::\n:::\n\n\nSo why doesn't this work with `table()`?? This problem has driven me crazy on several occasions. I always ended up reverting back to the `table(pets$main_pet_color)` syntax, but I was not happy about it.\n\nTurns out, there's a simple fix.\n\n## Solution\n\nIntroducing... a new pipe! `%$%` is called the \"exposition pipe,\" according to the magrittr package documentation, and it's basically the tidy version of the `with()` function, which I wrote about previously.\n\nIf we simply swap out `%>%` for `%$%` in our failed code above, it works!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a frequency table of pet colors\npets %$% table(main_pet_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmain_pet_color\n black  brown  multi orange  white \n     1      5      4      1      2 \n```\n:::\n:::\n\n\n**Important note: Make sure you have `magrittr` loaded if you want to use this pipe. `dplyr` includes the basic `%>%`, but not the other `magrittr` pipes.**\n\n## Why it works\n\nThe traditional pipe, `%>%`, works by passing a data frame or tibble into the next function. But that only works if the function you're piping to is set up to take a data frame/tibble as an argument!\n\nFunctions in the `tidyverse`, like `arrange()`, are set up to take this kind of argument, so that piping works seamlessly. But many base R functions take vectors as inputs instead.\n\nThat's the case with `table()`. When we write `table(pets$main_pet_color)`, the argument `pets$main_pet_color` is a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This returns a vector\npets$main_pet_color\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"brown\"  \"brown\"  \"multi\"  \"multi\"  \"brown\"  \"brown\"  \"brown\"  \"orange\"\n [9] \"black\"  \"white\"  \"multi\"  \"white\"  \"multi\" \n```\n:::\n:::\n\n\nWhen we try to pass pets into `table()` with the pipe, `table()` expects a vector but gets a data frame instead, and it throws an error.\n\nThe `%$%` pipe \"exposes\" the column names of the data frame to the function you're piping to, allowing that function to make sense of the data frame that is passed to it.\n\n### Outcome\n\nThe exposition pipe is great for integrating non-tidyverse functions into a tidy workflow. The outcome for me is that I can finally make frequency tables to my heart's content, without \"code switching\" back from tidy to base R syntax. Of course, the downside is that you do have to install `magrittr`, which is sometimes an extra dependency that I don't want to deal with. But it's nice to have the option!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Congrats, you made it to the end! Here are some more cats for you.](kitties.jpg){width=1512}\n:::\n:::\n\n\n### Resources\n\n`magrittr` has a couple other pipes, too: `%T%` and `%<>%`. The package also has some nice aliases for basic arithmetic functions that allow them to be incorporated into a chain of pipes. To read more about these magrittr options, scroll to the bottom of the [`magrittr` vignette](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html).\n\nNote: The image at the top of this post was modified from the `magrittr` documentation.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}